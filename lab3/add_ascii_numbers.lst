   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Clinten Hopkins
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               .align 2
  29 0000               .data
  30 0000               newline:
  31 0000 0A      	    .ascii "\n"
  32 0000               .text
  33 0000               	.globl	add_ascii_numbers
  34 0000               
  35 0000               add_ascii_numbers:
  36 0000               A_FRAMESIZE = 40
  37 0000               
  38 0000               #
  39 0000               # Save registers ra and s0 - s7 on the stack.
  40 0000               #
  41 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  42 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  43 0008 AFB7001C		sw 	$s7, 28($sp)
  44 000c AFB60018		sw 	$s6, 24($sp)
  45 0010 AFB50014		sw 	$s5, 20($sp)
  46 0014 AFB40010		sw 	$s4, 16($sp)
  47 0018 AFB3000C		sw 	$s3, 12($sp)
  48 001c AFB20008		sw 	$s2, 8($sp)
  49 0020 AFB10004		sw 	$s1, 4($sp)
  50 0024 AFB00000		sw 	$s0, 0($sp)
  51 0028               	
  52 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  53 0028                   
  54 0028 00804021	    move    $t0, $a0    # store the address of the param block in t0
  55 002c 8D110000	    lw  $s1, 0($t0)     # load the address (not data) of input str 1 into s1
  56 0030 8D120004	    lw  $s2, 4($t0)     # load the address of the input 2 into s2
  57 0034 8D130008	    lw  $s3, 8($t0)     # load the address to store the result into s3
  58 0038 8D14000C	    lw  $s4, 12($t0)    # load the len of the strings into s4
  59 003c               
  60 003c 34190001	    li  $t9, 1          # t9 will be a carry boolean
  61 0040 34150000	    li  $s5, 0          # s5 will act as a counter
  62 0044               
  63 0044               str_ele_loop:
  64 0044 12B40016	    beq $s5, $s4, done  # if the counter == len of the str, goto done
  65 0048 0295B022	    sub $s6, $s4, $s5   # offset = len - counter
  66 004c 340B0001	    li  $t3, 1
  67 0050 02CBB022	    sub $s6, $s6, $t3   # offset -= 1 (converting to index of str)
  68 0054 02365820	    add $t3, $s1, $s6   # set t3 to be the address of s1 + offset
  69 0058 02566020	    add $t4, $s2, $s6   # set t4 to be the address of s2 + offset
  70 005c               
  71 005c 34180030	    li $t8, 48
  72 0060               
  73 0060 816B0000	    lb  $t3, 0($t3)     # store the str rep. of s1 in t3
  74 0064 01785822	    sub $t3, $t3, $t8   # store the num. rep. of the s1 letter in t3
  75 0068               
  76 0068 818C0000	    lb  $t4, 0($t4)     # store the str rep. of s2 in t4
  77 006c 01986022	    sub $t4, $t4, $t8   # store the num. rep. of the s2 letter in t4
  78 0070               
  79 0070 17200001	    bne $t9, $zero, create_sum  # if t9 == 0, add 1 (the carry)
  80 0074 218C0001	    addi    $t4, $t4, 1
  81 0078               
  82 0078               create_sum:
  83 0078 016C6820	    add $t5, $t3, $t4   # store the sum in t5 (w/ carry)
  84 007c               
  85 007c 29B9000A	    slti    $t9, $t5, 10    # if t5 < 10 => t9 = 1
  86 0080               
  87 0080 17200002	    bne $t9, $zero, save_digit  # if t5 >= 10
  88 0084 340B000A	    li  $t3, 10
  89 0088 01AB6822	    sub $t5, $t5, $t3   # sum = sum - 10
  90 008c               
  91 008c               save_digit:
  92 008c 02767020	    add $t6, $s3, $s6   # t6 = address of storage + offset
  93 0090 21AD0030	    addi    $t5, $t5, 48    # add ascii back to sum
  94 0094 A1CD0000	    sb  $t5, 0($t6)     # store the ascii
  95 0098                   
  96 0098 22B50001	    addi    $s5, $s5, 1 # increment the counter
  97 009c 08000011	    j str_ele_loop
  98 00a0               
  99 00a0               done:
 100 00a0               
 101 00a0               # ###### END STUDENT CODE BLOCK 1 ######
 102 00a0               
 103 00a0               #
 104 00a0               # Restore registers ra and s0 - s7 from the stack.
 105 00a0               #
 106 00a0 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
 107 00a4 8FB7001C		lw 	$s7, 28($sp)
 108 00a8 8FB60018		lw 	$s6, 24($sp)
 109 00ac 8FB50014		lw 	$s5, 20($sp)
 110 00b0 8FB40010		lw 	$s4, 16($sp)
 111 00b4 8FB3000C		lw 	$s3, 12($sp)
 112 00b8 8FB20008		lw 	$s2, 8($sp)
 113 00bc 8FB10004		lw 	$s1, 4($sp)
 114 00c0 8FB00000		lw 	$s0, 0($sp)
 115 00c4 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
 116 00c8               
 117 00c8 03E00008		jr	$ra			# Return to the caller.


      Name         F  Value   M V Sect.         References
-----------------  - -------- - - ----- --------------------------
A_FRAMESIZE          00000028 =         @   37,  41,  42, 106, 115
add_ascii_numbers    00000000 R G text  @   32,  35
create_sum           00000078 R   text  @   79,  82
done                 000000A0 R   text  @   64,  99
newline              00000000 R   data  @   30
save_digit           0000008C R   text  @   87,  91
str_ele_loop         00000044 R   text  @   63,  97
